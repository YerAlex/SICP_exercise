Ex 1.2 
	(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4 5))))) (*3 (- 6 2) (- 2 7))

Ex 1.3
	(define (square_of_two_larger x y z)
		(cond ((and (< x y) (< x z)) (+ (* y y) (* z z))
		          ((and (< y x) (< y z)) (+ (* x x) (* z z))
		           (else (+ (* x x) (* y y)) )))))

Ex 1.8
	(define (cube_root approx x)
	   (if (good-enough? approx x)
		   approx
		   (cube_root (improve approx x) x)))

	(define (good-enough? approx x )
	   (> 0.0001 (abs (- x (* approx approx approx)))))

	(define (improve approx x )
	  (/
		   (+
				  (/ x (* approx approx))
				  (* 2 approx))
		   3
	   )
	 )

	(cube_root 3.0 64.0)
	
	
Ex 1.10
	(A 1 10) = 1024
	(A 2 4)  = 65536
	(A 3 3)  = 65536
	(f n)    = 2n
	(g n)    = 2^n
	(h n)    = 2^(2^(2^(2...)))
	
Ex 1.11
	For recursive solution:
	(define (F_r n)
		(cond ((or (= n 0) (= n 1) (= n 2)) n)
			(else (+ (F_r (- n 1)) (* 2 (F_r (- n 2))) (* 3 (F_r (- n 3)))))))
			
	For iterative solution:
	(define (F_i n)
		(F_iter  0 1 2 n))
	(define (F_iter a b c n)
		(cond  	( (= n 0) a)
				( (= n 1) b)
				( (= n 2) c)
				(else 
					( F_iter b c (+ c (* 2 b) (* 3 a)) (- n 1)))))	
					
Ex 1.12
	(define (Pascal row col)
		(cond 	((= row col) 1)
				((= col 0) 1)
				(else
					(+ (Pascal (- row 1) (- col 1)) (Pascal (- row 1) col)))))
	Extension: (The iterative version) in waiting-list
	
Ex 1.16
	(define (expt b n)
		(define (expt-iter b n product)
			(cond 	((= n 0) product)
					((even? n) (expt-iter (square b) (/ n 2) product))
					(else
						(expt-iter b (- n 1) (* b product)))))
		(expt-iter b n 1))
	(define (square b)
		(* b b))
	(define (even? n)
		(= (remainder n 2) 0))
	
Ex 1.17
	Iterative version:
	(define (multip a b)
		(define (multip-iter a b product)
			(cond 	((= b 0) product)
					((even? b) (multip-iter (double a) (halve b) product))
					(else
						(multip-iter a (- b 1) (+ a product)))))
		(multip-iter a b 0))
	(define (double a)
		(* a 2))
	(define (halve b)
		(/ b 2))
	(define (even? n)
		(= (remainder n 2) 0))
		
	Recursive version:
	(define (fast-multip a b)
		(cond 	((= b 0) 0)
				((even? b) (double (fast-multip a (halve b))))
				(else
					(+ a (fast-multip a (- b 1))))))
	(define (double a)
		(* a 2))
	(define (halve b)
		(/ b 2))
	(define (even? n)
		(= (remainder n 2) 0))
		
Ex 1.19
	p' = p^2 + q^2
	q' = q^2 + 2pq
	
Ex 1.29
    (define (sum term a next b)
		(if (> a b)
			0
			(+ (term a)
				(sum term (next a) next b))))
	(define (simpson-rule f a b n)
		(define h (/ (- b a) n))
		(define (add-h x) (+ x (* 2 h)))
			(* (/ h 3) (+ (f a) (f b) (* 4 (sum f (+ a h) add-h b))
						(* 2 (sum f (+ a (* 2 h)) add-h (- b h))))))

	(define (cube n) (* n n n))
	(simpson-rule cube 0 1 100)
	
Ex 1.30
	(define (sum term a next b)
		(define (iter a result)
			(if (> a b)
				result
				(iter (next a) (+ (term a) result))))
		(iter a 0))

Ex 1.31
	(define (product term a next b)
		if (> a b)
			1
			(* (term a) (product term (next a) next b))))
			
	(define (factorial n)
		(define (identity x) x)
		(define (plus x) (+ x 1))
		(product identity 1 plus n))
		
	(define (approximation_pi count)
		(define (plus x) (+ x 1))
		(define (numer n)
			(if (= (remainder n 2) 0)
				(+ n 2)
				(+ n 1)))
		(define (denom n)
			(if (= (remainder n 2) 0)
				(+ n 1)
				(+ n 2)))
		(/ (product numer 1  plus count) (product denom 1 plus count)))
	(* 4 (approximation_pi 50000))
	Iterative version:
	(define (product term a next b)
		(define (iter a result)
			(if (> a b)
				result
				(iter (next a) (* result (term a)))))
		(iter a 1))

Ex 1.32
	(define (accumulate combiner null-value term a next b)
		(if (> a b)
			null-value
			(combiner (term a) (accumulate combiner null-value term (next a) next b))))

	(define (sum a b)
		(define (plus a b) (+ a b))
		(define (next x) (+ 1 x))
		(define (identity x) x)
		(accumulate plus 0 identity a next b))

	(define (product a b)
		(define (times a b) (* a b))
		(define (next x) (+ 1 x))
		(define (identity x) x)
		(accumulate times 1 identity a next b))
	Iterative version:
	(define (accumulate combiner null-value term a next b)
		(define (iter a result)
			(if (> a b)
				result
				(iter (next a) (combiner (term a) result))))
		(iter a null-value))

Ex 1.33
	(define (filtered-accumulate combiner null-value term a next b filter)
		(if (> a b)
			null-value
			(if (fiter a)
                (combiner (term a) (filtered-accumulate combiner null-value term (next a) next b filter))
                (filtered-accumulate combiner null-value term (next a) next b filter))))


